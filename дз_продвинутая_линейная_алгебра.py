# -*- coding: utf-8 -*-
"""ДЗ_Продвинутая_Линейная_алгебра.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FkgCexMNIeL2nFr2t0QShhMlukT5X9xt

ДЗ

Уровень 0:
Задание 1
При помощи линейных отображений:

Уменьшить объект в два раза
Повернуть на 130 градусов
Отразить объект относительно прямой y=x (поможет матрица [[0, 1, 0], [1, 0, 0], [0, 0, 1]])
"""

import numpy as np
import matplotlib.pyplot as plt

A = [
[-100, -100, 1],
[-100, 100, 1],
[100, 100, 1],
[0, 0, 1],
[100, -100, 1],
[-100, -100, 1]
]

A = np.array(A)

x = A[:,0]
y = A[:,1]
plt.plot(x, y)
plt.ylim([-200, 200])
plt.xlim([-200, 200])

B = np.array([[0.5,0, 1], [0,0.5, 1]])

res = B@A.transpose() #Транспонирование применяется для приведения в соответствие размеров матрицы
tt = res.transpose()

A = np.array(tt);
x = A[:,0];
y = A[:,1];

plt.plot(x,y)
plt.ylim([-200, 200])
plt.xlim([-200, 200])

A = [
[-100, -100, 1],
[-100, 100, 1],
[100, 100, 1],
[0, 0, 1],
[100, -100, 1],
[-100, -100, 1]
]

A = np.array(A)

x = A[:,0]
y = A[:,1]
plt.plot(x, y)
plt.ylim([-200, 200])
plt.xlim([-200, 200])

import math

x = math.radians(130)
x

B = np.array([[math.cos(x),math.sin(x), 0], [-math.sin(x),math.cos(x), 0]]) #на -130 градусов

B = np.array([[math.cos(x),-math.sin(x), 0], [math.sin(x),math.cos(x), 0]]) #на 130 градусов

res = B@A.transpose()
tt = res.transpose()

A = np.array(tt);
x = A[:,0];
y = A[:,1];

plt.plot(x,y)
plt.ylim([-200, 200])
plt.xlim([-200, 200])

A = [
[-100, -100, 1],
[-100, 100, 1],
[100, 100, 1],
[0, 0, 1],
[100, -100, 1],
[-100, -100, 1]
]

A = np.array(A)

x = A[:,0]
y = A[:,1]
x2, y2 = [-200,200], [-200,200]
plt.plot(x, y, x2, y2)
plt.ylim([-200, 200])
plt.xlim([-200, 200])

B = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])

res = B@A.transpose()
tt = res.transpose()

A = np.array(tt);
x = A[:,0];
y = A[:,1];
x2, y2 = [-200,200], [-200,200]
plt.plot(x, y, x2, y2)


plt.ylim([-200, 200])
plt.xlim([-200, 200])

"""Уровень 1:
Задание 2
Найдите спектральное разложение матрицы:

m = np.array([[1, 2],
              [2, 3]])
print(m)
"""

m = np.array([[1, 2],
              [2, 3]])
print(m)

v, w = np.linalg.eigh(m) #Находим собственные значения и векторы

v #собственные значения

w  #собственные векторы

D = np.diag(v)

D

S = np.array(w)

S

St = S.transpose()

St

np.dot(St,S) # Убедимся что матрицы S  и S.T ортоганальны

np.dot(np.dot(S,D),St) #Проверим результат