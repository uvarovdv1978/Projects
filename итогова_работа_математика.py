# -*- coding: utf-8 -*-
"""Итогова_работа_Математика.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11HusENOa2LASvVkdhdFh5QR8tIZMOeFO
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import numpy as np

from scipy.optimize import differential_evolution
from scipy.optimize import minimize
from scipy.stats import norm
# %matplotlib inline

"""Задание 1
Вычислите производную функции:


в точке
"""

import sympy as sym
import numpy as np

x = sym.Symbol('x')
f = sym.tan(sym.sin(x) + sym.cos(2*x + 3))**2
derivative_f = sym.diff(f,x)
derivative_f

fx = sym.lambdify(x, derivative_f)
fx(1)

"""Дан объект в  пространстве
При помощи матричных операций выполните:

Смещение объекта и масштабирование (применить 2 матрицы трансформаций). Смещение на (200, 300) и масштабирование на (0.5, 1.2)
"""

import numpy as np
import matplotlib.pyplot as plt

A = [
[-100, -100, 1],
[0, 100, 1],
[100, -100, 1],
[-100, -100, 1]
]

A = np.array(A)

x = A[:,0]
y = A[:,1]
plt.plot(x, y)
plt.ylim([-200, 200])
plt.xlim([-200, 200])

A = [
[-100, -100, 1],
[0, 100, 1],
[100, -100, 1],
[-100, -100, 1]
]
A = np.array(A)
B0 = np.array([200,300,0])
B1 = B0[:]
for i in range(3):
    B1=np.vstack((B1, B0))

B1

A1 = A+B1

A1

"""Или так:"""

A = [
[-100, -100, 1],
[0, 100, 1],
[100, -100, 1],
[-100, -100, 1]
]
B = [
[200, 300, 0],
[200, 300, 0],
[200, 300, 0],
[200, 300, 0]
]
A = np.array(A)
B = np.array(B)
A1 = A+B

A1

x = A1[:,0];
y = A1[:,1];

plt.plot(x,y)
plt.ylim([-0, 500])
plt.xlim([-0, 400])

B = np.array([[0.5,0, 1], [0,1.2, 1]])

res = B@A.transpose() #Транспонирование применяется для приведения в соответствие размеров матрицы
tt = res.transpose()

A = np.array(tt);
x = A[:,0];
y = A[:,1];

plt.plot(x,y)
plt.ylim([-200, 200])
plt.xlim([-200, 200])

"""Задание 3
Найдите собственные значения и собственные вектора матрицы:
"""

m = np.array([[1, 4],
              [1, 1]])
print(m)

np.linalg.eig(m) #Находим собственные значения и векторы

"""Задание 4.
Дана функция с неизвестными параметрами a и b, вам также известны значения функции fx в точках x.

Найдите оптимальные параметры a, b, минимизирующие абсолютную ошибку error.
"""

def f(x, a, b):
    return np.e**a * np.sin(b*x) + x

x = np.array([0.        , 0.26315789, 0.52631579, 0.78947368, 1.05263158,
              1.31578947, 1.57894737, 1.84210526, 2.10526316, 2.36842105,
              2.63157895, 2.89473684, 3.15789474, 3.42105263, 3.68421053,
              3.94736842, 4.21052632, 4.47368421, 4.73684211, 5.        ])

fx = np.array([  0.        , -12.01819092, -18.90968634, -17.68786571,
                -8.7529108 ,   4.27524517,  16.06801336,  21.81250213,
                19.22059845,   9.48411207,  -3.22273056, -13.48576488,
               -16.91096359, -11.95866834,  -0.58630088,  12.56873816,
                22.12489421,  24.20292139,  18.04522521,   6.33211092])

plt.plot(x, fx)
plt.show()

def error(params):
    return np.sum(np.abs(fx - f(x, params[0], params[1])))

bounds = [(-20, 20), (-20, 20)]

result =differential_evolution(error, bounds, seed = 42, recombination=0.8,tol = 0.1)
result

error(result.x)

"""Задание 5
Дана матрица рейтингов фильмов (строки - пользователи (10 человек), столбцы - фильмы (15 фильмов))
Необходимо найти наиболее похожего пользователя по косинусной метрике для каждого из пользователей (ответ: 10 пар вида (x, y), где y - наиболее похожий пользователь на пользователя x).
"""

raitings = np.array([[ 4,  4,  9,  4,  1,  6, 10,  7,  9,  6,  9,  2,  8,  6,  6],
                     [ 9,  2,  5, 10,  7,  8, 10,  5,  6,  2,  1,  6,  8,  9,  7],
                     [ 1,  6,  8,  8,  4,  9,  3,  8, 10,  5,  2,  6,  8,  1,  6],
                     [ 6,  1,  9,  7,  7,  9,  2,  3,  5,  1,  6,  6,  3,  2,  7],
                     [ 3,  7,  3,  5,  7,  9,  9,  6,  2,  9,  1,  2,  8, 10,  6],
                     [ 8,  3,  7,  3,  8,  6,  1,  8,  8,  6,  1,  9,  4, 10,  1],
                     [ 9,  8,  4,  8,  8, 10,  6,  1,  1,  2,  9,  5,  2,  7,  2],
                     [ 4,  1,  6,  4,  3, 10,  4,  4,  2,  8,  7,  9,  3,  8,  3],
                     [ 2,  7,  7,  6, 10,  6,  8,  9,  8,  6, 10,  1,  7, 10,  4],
                     [ 5, 10,  8,  8,  9,  7,  2,  9,  9, 10,  8,  8,  8,  6, 10]])

x = 0
y = 0
UserList = []
for row in raitings:
    x+=1
    c=0
    total = 1
    for row_1 in raitings:
        c+=1
        if c != x:
            res =  np.arccos(np.dot(row,row_1)/(np.linalg.norm(row) * np.linalg.norm(row_1)))
            if res < total:
                total = res
                y = c
    UserList.append([x,y])
    print('Пользователю:', x, 'наиболее близок пользователь:', y)
print(UserList)